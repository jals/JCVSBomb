package bomberman.test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;

import bomberman.Command;
import bomberman.Command.Operation;
import bomberman.Logger;

/**
 * Simulates client/server interaction by executing test cases.
 * 
 * @author spbyron
 *
 */
public class TestDriver {

	// Commands executed by the TestDriver are stored in an array list, to be
	// compared with the list of commands recieved by the server later
	private static ArrayList<Command> commands = new ArrayList<Command>();
	
	/**
	 * Runs the given test case
	 * @param testFile
	 */
	private static String runTest(File testFile) {
		// Start up a server
		ServerThread server = new ServerThread();
		server.start();

		// Hashmap to keep track of the clients that have been spawned off
		HashMap<String, ClientThread> clients = new HashMap<String, ClientThread>();
		
		// Open the file for reading
		BufferedReader reader;
		try {
			reader = new BufferedReader(new FileReader(testFile));
		} catch (FileNotFoundException e1) {
			System.out.println("ERROR: File not found");
			return server.getLogFile();
		}

		// Start processing the test case
		try {
			String line = reader.readLine();
			
			while (line != null) {
				String[] split = line.split(",");
			
				// Create a new client
				if (split[0].equals(Logger.PLAYER)) {
					System.out.println("Adding new player: " + split[1]);
					
					ClientThread clientThread = new ClientThread(split[1]);
					clients.put(split[1], clientThread);
					
					clientThread.start();
					
					// Add the command into the array list to track what has been done
					commands.add(new Command(split[1], Operation.JOIN_GAME));
					
					// Sleep for a time
					Thread.sleep(500);
				}
				
				// Process the command
				if (split[0].equals(Logger.COMMAND)) {
					System.out.println("Executing command: " + split[2] + " (" + split[1] + ")");
					
					// Add the command into the array list to track what has been done
					Command.Operation operation = Command.Operation.valueOf(split[2].toUpperCase());
					commands.add(new Command(split[1], operation));
					
					// Send the command to the correct client
					ClientThread clientThread = clients.get(split[1]);
					clientThread.getClient().move(split[2]);
					
					// Sleep for a time
					Thread.sleep(500);
				}
				
				line = reader.readLine();
			}

		} catch (IOException e) {
			System.out.println("ERROR: Error reading file");
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		// Shutdown all the clients
		Set<String> players = clients.keySet();
		for (String s : players) {
			clients.get(s).shutdown();
			
			// Wait for the client to shutdown
			try {
				clients.get(s).join(5000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		String log = server.getLogFile();
		server.shutdown();
		
		// Wait for the server to shutdown before continuing
		try {
			server.join(5000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		return log;
	}
	
	/**
	 * Compares the list of commands executed by the TestDriver to the log file 
	 * generated by the server.
	 * If the two match, the test case completed successfully
	 * @return
	 */
	private static boolean verifyServerLog(String logFile) {
		BufferedReader reader = null;
		boolean ret = true;
		
		try {
			reader = new BufferedReader(new FileReader(new File(logFile)));
			String line = reader.readLine();
			int i=0;
			
			while (line!=null) {
				String[] split = line.split(",");
				
				if (split[0].equals(Logger.COMMAND)) {
					String player = split[1].split("=")[1];
					Command.Operation operation = Command.Operation.valueOf(split[2].split("=")[1]);
					
					Command command = commands.get(i);

					if (!command.getPlayer().equals(player)) {
						return false;
					}
					
					if (!command.getOperation().equals(operation)) {
						return false;
					}
					
					i++;
				}
				
				line = reader.readLine();
			}
			
			return true;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			ret = false;
		} catch (IOException e) {
			e.printStackTrace();
			ret = false;
		} finally {
			try {
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return ret;
		
	}
	
	private static void executeTestCase(File file) {
		String logFile = runTest(file);
		
		if (!verifyServerLog(logFile)) {
			System.out.println("Server log file does not match the list of commands "
					+ "sent by the test case.\n"
					+ "Test case DID NOT execute successfully.\n");
		} else {
			System.out.println("Test case completed successfully\n");
		}
	}
	
	private static void runAll(File[] files) {
		for (int i=0; i<files.length; i++) {
			executeTestCase(files[i]);
		}
	}

	/**
	 * Usage: TestDriver {test_directory} (optional)
	 * 
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
		String location = new String();
		
		if (args.length < 1) {
			location = "tests/";
		} else {
			location = args[0];
		}
		
		File testDirectory = new File(location);
		
		if (!testDirectory.exists()) {
			System.out.println("ERROR: Directory specified does not exist");
			return;
		}
		
		if (!testDirectory.isDirectory()) {
			System.out.println("ERROR: Location specified is not a directory");
			return;
		}
		
		File[] files = testDirectory.listFiles();
		
		for (int i=0; i<files.length; i++) {
			System.out.println(i + "\t" + files[i].getName());
		}
		
		System.out.print("Type a test number and press enter to run it (all to run all tests, exit to quit): ");
		Scanner console = new Scanner(System.in);
		String input = console.nextLine();
		
		while (!input.equals("exit")) {
			
			if (input.equals("all")) {
				runAll(files);
			} else {
				int numEntered = Integer.parseInt(input);
				if (numEntered < files.length) {
					executeTestCase(files[numEntered]);
				} else {
					System.out.println("Invalid number entered. Please enter a number between 0 and " + (files.length-1));
				}
				
				for (int i=0; i<files.length; i++) {
					System.out.println(i + "\t" + files[i].getName());
				}
			}
			
			System.out.print("Type a test number and press enter to run it (all to run all tests, exit to quit): ");
			input = console.nextLine();
		}
		
		console.close();
		
	}

}
